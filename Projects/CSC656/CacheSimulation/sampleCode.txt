vector< vector<int> > cacheMeta(numBlocks, vector<int>(3)); 
vector< vector<string> > cacheBlock(numBlocks, vector<string>(blockSize << 2));

for (int i = 0; i < numBlocks; i++){
	cacheMeta[i][0] = 0; //tag
	cacheMeta[i][1] = 0; //valid
	cacheMeta[i][2] = 0; //dirty
	for (int j = 0; j< (blockSize<<2); j++){
		cacheBlock[i][j] = ""; //data in block at offset j
	}
}

int numLines = data.size();
stringstream verboseStream;

for (int i = 0; i < numLines; i++){
			int index = (dataAddress[i] >> offsetSize) & (numBlocks - 1);
			int offset = dataAddress[i] & ((int)pow(2,offsetSize) - 1);
			int tag = dataAddress[i] >> (offsetSize + indexSize);

			verboseStream.str(string());
			verboseStream << dec << i << ' ';
			verboseStream << hex << index << ' ' << tag << ' ' <<
				cacheMeta[index][1] << ' ' << cacheMeta[index][0] <<
				' ' << cacheMeta[index][2] << ' ';

			accesses++;

			//cache hit
			if(cacheMeta[index][0] == tag && cacheMeta[index][1] == 1){
				verboseStream << "1 1\n";
				//read hit
				if (accessType[i].compare("R") == 0){
					reads++;
					readTime++; // cache to CPU
				}
				//write hit
				else{
					writes++;
					writeTime++; // CPU to cache
					cacheMeta[index][2] = 1;
					cacheBlock[index][offset<<2] = data[i];
				}
			}
			//cache miss
			else{
				verboseStream << "0 2";
				dataMiss++;
				cacheMeta[index][0] = tag;
				cacheMeta[index][1] = 1;
				cacheBlock[index][offset<<2] = data[i];

				//clean miss
				if(cacheMeta[index][2] == 0){
					verboseStream << "a\n";
					//clean read miss
					if(accessType[i].compare("R") == 0){
						reads++;
						readMiss++;
						readTime+= 81; 
						bytesRead+= blockSize;
						cacheMeta[index][2] = 0;
					}
					//clean write miss
					else{
						writes++;
						writeMiss++;
						writeTime+= 81; 	
						bytesRead+= blockSize;
						cacheMeta[index][2] = 1;
					}
				}
				//dirty miss
				else{
					verboseStream << "b\n";
					//dirty read miss
					if(accessType[i].compare("R") == 0){
						reads++;
						readMiss++;
						dirtyRead++;
						readTime+=161;
						bytesWrite+= blockSize;
						bytesRead+=blockSize;
						cacheMeta[index][2] = 0;
					}
					//dirty write miss
					else{
						writes++;
						writeMiss++;
						dirtyWrite++;
						writeTime+=161; 
						bytesWrite+= blockSize;
						bytesRead+=blockSize;
						cacheMeta[index][2] = 1;
					}
				}
			}
	
			if (verbose && i >= ic1 && i <= ic2)
				cout << verboseStream.str();

		}