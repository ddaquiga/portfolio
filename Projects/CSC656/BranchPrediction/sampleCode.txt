vector<int> predictor(n,1);
vector< vector<int> > btb(m, vector<int>(3)); // branch target buffer

/*
  btb[i][0] = tag
  btb[i][1] = valid
  btb[i][2] = bta
*/
for (int i = 0; i < m; i++){
  btb[i][0] = -1;
  btb[i][1] = 0;
  btb[i][2] = -1;
}

stringstream verboseStream;
int totalBranches = taken.size();

for (int i = 0; i < totalBranches; i++){
  if (branchType[i] == 1){

    /*
    / splitting up the current branch address to find the correct
    / index for the prediction buffer, index for the branch target
    / buffer, and the tag
    */
    int predictionIndex = (branchAddress[i] >> 2) & (n-1);
    int btbIndex = (branchAddress[i] >> 2) & (m-1);
    int btbTag = branchAddress[i] >> (2 + (int)log2((double)m));

    //  fill the stream if using verbose mode
    if (verbose){
      verboseStream.str(string());
      verboseStream << '\n' << numBranches << ' ';
    }

    //  collect branch statistics
    numBranches++;
    if (branchAddress[i] < branchTarget[i]){
      forward++;
      if (taken[i] == 1){
        forwardTaken++;
      }
    } else {
      backward++;
      if (taken[i] == 1){
        backwardTaken++;
      }
    }


    //fill verbose stream
    if (verbose){
      verboseStream << hex << predictionIndex << ' ' 
        << predictor[predictionIndex] << ' ';
    }


    if (predictor[predictionIndex] > 1){ //predicted taken
      btbAccess++;
      if (btb[btbIndex][1] == 1){ //if valid bit is on

        //  tags don't match, btb miss
        if (btb[btbIndex][0] != btbTag){
          btbMiss++;
        }
      }

      if (taken[i] == 0){
        mispredictions++;
      }
    }
    else{
      if (taken[i] == 1){
        mispredictions++;
      }
    }

    //  update prediction (2-bit saturation counter)
    if (taken[i] == 1){

      if (predictor[predictionIndex] < 3){
        predictor[predictionIndex]++;
      }

      btb[btbIndex][0] = btbTag;      //tag
      btb[btbIndex][1] = 1;       //valid bit
      btb[btbIndex][2] = branchTarget[i]; //branch target address
    }
    else{
      if (predictor[predictionIndex] > 0){
        predictor[predictionIndex]--;
      }
    }


    if (verbose){
      verboseStream << predictor[predictionIndex] << ' '
        << hex << btbIndex << ' ' 
        << hex << btb[btbIndex][0] << ' '
        << btbAccess << ' ' << btbMiss;
      cout << verboseStream.str();
    }

  }
}