//start trial
	int currentCyl = rand() % xmax + 1;
	double totalDistance = 0;
	double totalTime = 0;
	for (int i = 0; i < numAccesses; i++)
	{
		int closestDistance = xmax;
		int closestIndex;
		//find closest
		for (int j = 0; j < Q; j++)
		{
			if ( abs(dq[j] - currentCyl) <= closestDistance)
			{
				closestDistance = abs(dq[j] - currentCyl);
				closestIndex = j;
			}
		}

		//add to totals
		totalDistance += closestDistance;
		if (closestDistance != 0)
			totalTime += seekTime(closestDistance);
		//update
		currentCyl = dq[closestIndex];
		dq[closestIndex] = rand() % xmax + 1;

		
	}
	//averages
	double avgDistance = totalDistance/double(numAccesses);
	double avgTime = totalTime/double(numAccesses);

	cout << "Q: " << Q << " avgDistance: " << avgDistance << " avgTime: " <<
		avgTime << "\n";
}

double seekTime(int x)
{
	double result;
	if ( x <= xprime )
		result =  t + (c * pow((x-1),r));
	else
		result =  ((c * r * (x - xprime))/pow(xprime - 1,1-r)) + t + (c * pow(xprime-1,r));

 	return result;
}