for (int i = 0; i < max; i++){

	//Find Rj(i) = Dj(i)[1+Q(i-1)]
	if (i == 0){
		for (int j = 0; j < totalResources; j++){
			residence[i][j] = demand[j];
		}
	}
	else{
		for (int j = 0; j < totalResources; j++){
			residence[i][j] = demand[j] * (1 + queueLength[i-1][j]);
		}	
	}

	//Find R(i)
	for (int j = 0; j < totalResources; j++){
		response[i] += residence[i][j] * numResources[j];
	}

	//Find X(i)
	if (mode == 1) throughput[i] = (i+1)/(thinkTime + response[i]);
	else throughput[i] = (i + 1)/response[i];

	//Find Queue Lengths
	for (int j = 0; j < totalResources; j++){
		queueLength[i][j] = throughput[i] * residence[i][j];
	}
}