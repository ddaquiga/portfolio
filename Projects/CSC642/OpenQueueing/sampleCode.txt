while (jobsDone < totalJobs){
	if (queue.size() == 0){
		totalTime += currA;
		numJobsTime[0] += currA;
		if (jobsStarted < totalJobs){
			queue.push_back(jobsStarted);
			jobsStarted++;
			currA = jobs[queue[0]].arrival;
			currS = jobs[queue[0]].service;
		}
	}
	else if(currA < currS){
		totalTime += currA;
		currS -= currA;

		if (numJobsTime.size() < queue.size())
			numJobsTime.push_back(currA);
		else
			numJobsTime[queue.size()] += currA;

		for(int i=0; i<queue.size()-1; i++){
			jobs[queue[i+1]].wait += currA;
		}

		if (jobsStarted < totalJobs){
			queue.push_back(jobsStarted);
			jobsStarted++;
			currA = jobs[queue.back()].arrival;
		}
		else currA = 99;
	}

	else if(currS < currA){
		totalTime += currS;
		currA -= currS;
		if (numJobsTime.size() < queue.size())
			numJobsTime.push_back(currS);
		else
			numJobsTime[queue.size()] += currS;

		for (int i= 0; i < queue.size()-1; i++){
			jobs[queue[i+1]].wait += currS;
		}

		queue.erase(queue.begin());
		jobsDone++;
		currS = jobs[queue[0]].service;
	}
	else if(currS == currA){
		totalTime += currS;
		if (numJobsTime.size() < queue.size())
			numJobsTime.push_back(currS);
		else
			numJobsTime[queue.size()] += currS;

		for (int i= 0; i < queue.size()-1; i++){
			jobs[queue[i+1]].wait += currS;
		}

		if (jobsStarted < totalJobs){
			queue.push_back(jobsStarted);
			jobsStarted++;
			currA = jobs[queue.back()].arrival;
		}
		else currA = 99;
		queue.erase(queue.begin());
		jobsDone++;

		if(queue.size() > 0 )
			currS = jobs[queue[0]].service;
		else currS = 98;
	}