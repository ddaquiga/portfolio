template <typename T>
void Tree<T>::removeMatch( Node<T>* parent, Node<T>* node, bool left ){
  if ( root != NULL ){
    Node<T>* trash;
    T smallestInRight;

    // no children
    if ( node->left == NULL && node->right == NULL ){
      trash = node;
      if ( left ){
        parent->left = NULL;
      }
      
      else{
        parent->right = NULL;
      }

      delete trash;
    }

    // right child only
    else if ( node->left == NULL && node->right != NULL ){
      if ( left ){
        parent->left = node->right;
      }

      else{
        parent->right = node->right;
      }

      node->right = NULL;
      trash = node; 
      delete trash;
    }

    //left child only
    else if ( node->left != NULL && node->right == NULL ){
      if ( left ){
        parent->left = node->left;
      }

      else{
        parent->right = node->left;
      }

      node->left = NULL;
      trash = node; 
      delete trash;
    }

    // two children
    else{
      smallestInRight = getMinimumValue( node->right );
      removeHelp( node, smallestInRight );
      node->data = smallestInRight;
    }
  }
}